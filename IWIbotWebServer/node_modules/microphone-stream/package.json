{
  "_args": [
    [
      {
        "raw": "microphone-stream@^3.0.5",
        "scope": null,
        "escapedName": "microphone-stream",
        "name": "microphone-stream",
        "rawSpec": "^3.0.5",
        "spec": ">=3.0.5 <4.0.0",
        "type": "range"
      },
      "C:\\Users\\nkreu\\git\\IWIbot\\IWIbotWebServer\\node_modules\\watson-speech"
    ]
  ],
  "_from": "microphone-stream@>=3.0.5 <4.0.0",
  "_id": "microphone-stream@3.0.7",
  "_inCache": true,
  "_location": "/microphone-stream",
  "_nodeVersion": "7.9.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/microphone-stream-3.0.7.tgz_1492465026897_0.580496289068833"
  },
  "_npmUser": {
    "name": "nfriedly",
    "email": "nathan@nfriedly.com"
  },
  "_npmVersion": "4.2.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "microphone-stream@^3.0.5",
    "scope": null,
    "escapedName": "microphone-stream",
    "name": "microphone-stream",
    "rawSpec": "^3.0.5",
    "spec": ">=3.0.5 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/watson-speech"
  ],
  "_resolved": "https://registry.npmjs.org/microphone-stream/-/microphone-stream-3.0.7.tgz",
  "_shasum": "d4632f0ffd9b0d92cb54507e840d833a1d8b2be8",
  "_shrinkwrap": null,
  "_spec": "microphone-stream@^3.0.5",
  "_where": "C:\\Users\\nkreu\\git\\IWIbot\\IWIbotWebServer\\node_modules\\watson-speech",
  "author": {
    "name": "Jakob Miland",
    "email": "saebekassebil@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/saebekassebil/microphone-stream/issues"
  },
  "contributors": [
    {
      "name": "Nathan Friedly",
      "url": "http://nfriedly.com"
    }
  ],
  "dependencies": {},
  "description": "A stream of raw audio data from the microphone for use in browsers with getUserMedia",
  "devDependencies": {
    "browserify": "^14.3.0",
    "eslint": "^3.19.0",
    "eslint-config-google": "^0.7.1",
    "get-user-media-promise": "^1.0.0",
    "karma": "^1.6.0",
    "karma-browserify": "^5.0.0",
    "karma-chrome-launcher": "^2.0.0",
    "karma-mocha": "^1.3.0",
    "mocha": "^3.2.0"
  },
  "directories": {},
  "dist": {
    "shasum": "d4632f0ffd9b0d92cb54507e840d833a1d8b2be8",
    "tarball": "https://registry.npmjs.org/microphone-stream/-/microphone-stream-3.0.7.tgz"
  },
  "gitHead": "dacbbabc8baa6a5c0b2384c08d1f5d55f8ec8b56",
  "homepage": "https://github.com/saebekassebil/microphone-stream#readme",
  "keywords": [
    "webrtc",
    "getUserMedia",
    "WebAudio",
    "audio",
    "microphone",
    "stream",
    "record"
  ],
  "license": "MIT",
  "main": "microphone-stream.js",
  "maintainers": [
    {
      "name": "nfriedly",
      "email": "nathan@nfriedly.com"
    },
    {
      "name": "saebekassebil",
      "email": "saebekassebil@gmail.com"
    }
  ],
  "name": "microphone-stream",
  "optionalDependencies": {},
  "readme": "# Node-style stream for getUserMedia\n\n[![Build Status](https://travis-ci.org/saebekassebil/microphone-stream.svg?branch=master)](https://travis-ci.org/saebekassebil/microphone-stream)\n\nIf you just want to get some audio data from your microphone, this is what you're looking for!\n\nConverts a [MediaStream](https://developer.mozilla.org/en-US/docs/Web/API/MediaStream) (from [getUserMedia](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/getUserMedia)) into a standard Node.js-style stream for easy `pipe()`ing.\n\nNote: This only works in a [limited set of browsers](http://caniuse.com/#search=getusermedia)\n(typically with with [webpack](http://webpack.github.io/) or [browserify](http://browserify.org/)),\nand then only for [https or localhost in Chrome](https://www.chromium.org/Home/chromium-security/prefer-secure-origins-for-powerful-new-features).\nIt does not work in Node.js.\n\n\n### Example\n\n```js\nvar getUserMedia = require('get-user-media-promise');\nvar MicrophoneStream = require('microphone-stream');\n\ngetUserMedia({ video: false, audio: true })\n  .then(function(stream) {\n    var micStream = new MicrophoneStream(stream);\n\n    // get Buffers (Essentially a Uint8Array DataView of the same Float32 values)\n    micStream.on('data', function(chunk) {\n      // Optionally convert the Buffer back into a Float32Array\n      // (This actually just creates a new DataView - the underlying audio data is not copied or modified.)\n      var raw = MicrophoneStream.toRaw(chunk)\n      //...\n\n      // note: if you set options.objectMode=true, the `data` event will output AudioBuffers instead of Buffers\n     });\n\n    // or pipe it to another stream\n    micStream.pipe(/*...*/);\n\n    // It also emits a format event with various details (frequency, channels, etc)\n    micStream.on('format', function(format) {\n      console.log(format);\n    });\n\n    // Stop when ready\n    document.getElementById('my-stop-button').onclick = function() {\n      micStream.stop();\n    };\n  }).catch(function(error) {\n    console.log(error);\n  });\n```\n\n## `API`\n\n### `new MicrophoneStream(stream, opts)` -> [Readable Stream](https://nodejs.org/api/stream.html)\n\nWhere `opts` is an option object, with defaults:\n```js\n{\n  objectMode: false,\n  bufferSize: null\n}\n```\n\n* **bufferSize**: Possible values: null, 256, 512, 1024, 2048, 4096, 8192, 16384. From [Mozilla's Docs](https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createScriptProcessor):\n > It is recommended for authors to not specify this buffer size and allow the implementation to pick a good buffer size \n > to balance between latency and audio quality.\n  \n* **objectMode**: if true, stream enters [objectMode] and emits AudioBuffers instead of Buffers. This has implications for `pipe()`'ing to other streams.\n\n#### `.stop()` \n\nStops the recording. \nNote: Some versions of Firefox leave the recording icon in place after recording has stopped.\n\n#### Event: `data`\n\nEmits either a [Buffer] with raw 32-bit Floating point audio data, or if [objectMode] is set, an [AudioBuffer] containing the data + some metadata.\n\n#### Event: `format`\n\nOne-time event with details of the audio format. Example:\n\n```js\n{\n  channels: 1,\n  bitDepth: 32,\n  sampleRate: 48000,\n  signed: true,\n  float: true\n}\n```\n\n## `MicrophoneStream.toRaw(Buffer) -> Float32Array`\n  \nConverts a `Buffer` (from a `data` event or from calling `.read()`) back to the original Float32Array DataView format. (The underlying audio data is not copied or modified.)\n\n[AudioBuffer]: https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer\n[Buffer]: https://nodejs.org/api/buffer.html\n[objectMode]: https://nodejs.org/api/stream.html#stream_object_mode\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/saebekassebil/microphone-stream.git"
  },
  "scripts": {
    "autofix": "eslint . --fix",
    "lint": "eslint .",
    "test": "npm run lint && npm run test-integration",
    "test-integration": "karma start --single-run",
    "watch": "karma start"
  },
  "version": "3.0.7"
}
