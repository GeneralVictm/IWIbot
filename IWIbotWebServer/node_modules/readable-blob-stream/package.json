{
  "_args": [
    [
      {
        "raw": "readable-blob-stream@^1.1.0",
        "scope": null,
        "escapedName": "readable-blob-stream",
        "name": "readable-blob-stream",
        "rawSpec": "^1.1.0",
        "spec": ">=1.1.0 <2.0.0",
        "type": "range"
      },
      "C:\\Users\\nkreu\\git\\IWIbot\\IWIbotWebServer\\node_modules\\watson-speech"
    ]
  ],
  "_from": "readable-blob-stream@>=1.1.0 <2.0.0",
  "_id": "readable-blob-stream@1.1.0",
  "_inCache": true,
  "_location": "/readable-blob-stream",
  "_nodeVersion": "4.0.0",
  "_npmUser": {
    "name": "joris-van-der-wel",
    "email": "joris@jorisvanderwel.com"
  },
  "_npmVersion": "2.14.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "readable-blob-stream@^1.1.0",
    "scope": null,
    "escapedName": "readable-blob-stream",
    "name": "readable-blob-stream",
    "rawSpec": "^1.1.0",
    "spec": ">=1.1.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/watson-speech"
  ],
  "_resolved": "https://registry.npmjs.org/readable-blob-stream/-/readable-blob-stream-1.1.0.tgz",
  "_shasum": "db1a548e8e70ae3320f2d2401454a84a69c3df80",
  "_shrinkwrap": null,
  "_spec": "readable-blob-stream@^1.1.0",
  "_where": "C:\\Users\\nkreu\\git\\IWIbot\\IWIbotWebServer\\node_modules\\watson-speech",
  "author": {
    "name": "Joris van der Wel",
    "email": "joris@jorisvanderwel.com"
  },
  "bugs": {
    "url": "https://github.com/Joris-van-der-Wel/readable-blob-stream/issues"
  },
  "dependencies": {
    "inherits": "^2.0.1"
  },
  "description": "Read W3C Blob & File objects as a Node stream. Very useful with \"browserify\" and \"primus\" with \"ejson\" using pipe()",
  "devDependencies": {
    "browserify": "^6.3.2"
  },
  "directories": {},
  "dist": {
    "shasum": "db1a548e8e70ae3320f2d2401454a84a69c3df80",
    "tarball": "https://registry.npmjs.org/readable-blob-stream/-/readable-blob-stream-1.1.0.tgz"
  },
  "gitHead": "16452c18b514f21f1dfb1a72e823e7c400008174",
  "homepage": "https://github.com/Joris-van-der-Wel/readable-blob-stream",
  "keywords": [
    "arraybuffer",
    "blob",
    "browser",
    "browserify",
    "buffer",
    "commonjs",
    "datatransfer",
    "dataview",
    "ejson",
    "file",
    "filelist",
    "filereader",
    "html5",
    "pipe",
    "readable",
    "require",
    "stream",
    "uint8array",
    "w3c",
    "whatwg"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "joris-van-der-wel",
      "email": "joris@jorisvanderwel.com"
    }
  ],
  "name": "readable-blob-stream",
  "optionalDependencies": {},
  "readme": "readable-blob-stream\n====================\nRead W3C Blob & File objects as a Node stream. Very useful with\n\"[browserify](https://www.npmjs.org/package/browserify)\" and \"[primus](https://www.npmjs.org/package/primus)\" with\n\"[ejson](https://www.npmjs.org/package/ejson)\" using pipe().\n\nINSTALLING\n----------\nIf you are already generating a bundle using browserify (or something similar), you can use it directly:\n\n    npm install readable-blob-stream --save\n\n```javascript\nvar ReadableBlobStream = require('readable-blob-stream');\n```\n\nOr, you can generate a standalone javascript file by [cloning](https://github.com/Joris-van-der-Wel/readable-blob-stream.git) or\n[downloading](https://github.com/Joris-van-der-Wel/readable-blob-stream/releases) this repo and typing:\n\n    npm install\n    npm run bundle\n\nLook in the build directory to find the generated file. This is a\n[UMD](http://dontkry.com/posts/code/browserify-and-the-universal-module-definition.html) module.\nWhich means you can either require() it using browserify, load it using AMD, or access it as the global `window.ReadableBlobStream`\n\nEXAMPLE\n-------\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>test</title>\n<script src=\"readable-blob-stream.js\"></script>\n<script>\nwindow.addEventListener('DOMContentLoaded', function()\n{\n    var myfile = document.getElementById('myfile');\n\n    myfile.addEventListener('change', function()\n    {\n        var file = myfile.files[0];\n        if (!file) { return; }\n\n        var stream = new ReadableBlobStream(file);\n        // or:\n        //var stream = new ReadableBlobStream(file, {highWaterMark : 128, encoding: 'utf8'});\n\n        stream.on('error', function(err)\n        {\n            console.log('error while reading your file:', err);\n        });\n\n        stream.on('end', function()\n        {\n            console.log('there will be no more data.');\n        });\n\n        stream.on('data', function(data)\n        {\n            // if you do not set an encoding,\n            // \"data\" is both a Buffer and an Uint8Array\n            console.log('got %d amount of data: ', data.length, data);\n        });\n\n        // If you are using primus you can simply use:\n        //     stream.pipe(spark);\n        // instead of using the 'data' listener\n    });\n});\n</script>\n</head>\n<body>\n<p>hi!</p>\n<input type=\"file\" id=\"myfile\">\n</body>\n</html>\n```",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Joris-van-der-Wel/readable-blob-stream.git"
  },
  "scripts": {
    "bundle": "browserify --outfile build/readable-blob-stream.js --standalone ReadableBlobStream ./index.js"
  },
  "version": "1.1.0"
}
